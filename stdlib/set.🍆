import "container.üçÜ"
import "avl_.üçÜ"
import "integer.üçÜ"
import "journal_tag.üçÜ"
import "pair.üçÜ"

UntaggedSet T : Container<T, AVLNode_<T>> {
	int size_;
	strong Comparator<T> comparator_;
	strong AVLNode_<T> root_;
	weak AVLNode_<T> end_;
	constructor(Comparator<T> c) () {
		comparator_ = c;
		root_ = new AVLNode_<T>(null, null);
		end_ = root_;
	};
	fun int size() {
		return size_;
	} noeffect;
	fun AVLNode_<T> begin() {
		var AVLNode_<T> b = root_;
		while(b.left_son != null) {
			b = b.left_son;
		}
		return b;
	} noeffect;
	fun AVLNode_<T> end() {
		return end_;
	} noeffect;
	fun AVLNode_<T> find(T key) {
		var AVLNode_<T> node = root_;
		while(node != null) {
			if(node == end_) {
				if(node.left_son != null) {
					node = node.left_son;
					continue;
				} else {
					break;
				}
			}
			var T k = node.deref();
			if(comparator_.eq(key, k)) {
				return node;
			}
			if(comparator_.less(key, k)) {
				node = node.left_son;
			} else {
				node = node.right_son;
			}
		}
		return end_;
	} noeffect;

	fun AVLNode_<T> rebalance_(AVLNode_<T> z) {
		var int bal = z.recalc_height();
		if(bal == -2) {
			if(z.left_son.recalc_height() == 1) {
				z.left_son.left_rotate();
			}
			if(z == root_) {
				root_ = z.left_son;
			}
			z.right_rotate();
			z = z.parent;
		} else  if (bal == 2) {
			if(z.right_son.recalc_height() == -1) {
				z.right_son.right_rotate();
			}
			if(z == root_) {
				root_ = z.right_son;
			}
			z.left_rotate();
			z = z.parent;
		}
		return z.parent;
	} noeffect;

	fun Pair<Integer, T> insert(T entry) {
		return this.insert_(entry, new AVLNode_<T>(null, null));
	} auto;

	fun Pair<Integer, T> insert_(T entry, AVLNode_<T> use_node) {
		var AVLNode_<T> node = root_;
		while(1) {
			if(node == end_) {
				if(node.left_son != null) {
					node = node.left_son;
					continue;
				} else {
					use_node.data = entry;
					use_node.parent = node;
					node.left_son = use_node;
					node = node.left_son;
					break;
				}
			}
			var T k = node.deref();
			if(comparator_.eq(entry, k)) {
				var T old = node.deref();
				node.set(entry);
				return new Pair<Integer, T>(new Integer(1), old), old, 1;
			}
			if(comparator_.less(entry, k)) {
				if(node.left_son != null) {
					node = node.left_son;
				} else {
					use_node.data = entry;
					use_node.parent = node;
					node.left_son = use_node;
					node = node.left_son;
					break;
				}
			} else {
				if(node.right_son != null) {
					node = node.right_son;
				} else {
					use_node.data = entry;
					use_node.parent = node;
					node.right_son = use_node;
					node = node.right_son;
					break;
				}
			}
		}
		while(node != null) {
			node = rebalance_(node);
		}
		size_ = size_ + 1;
		return new Pair<Integer, T>(new Integer(0), null), entry, 0;
	} dual (T old, int had_old) {
		if(had_old) {
			insert_(old, null);
		} else {
			erase_iter(find(old));
		}
	};

	fun Pair<Integer, T> erase(T key) {
		return this.erase_iter(find(key));
	} auto;

	fun void swap_(AVLNode_<T> a, AVLNode_<T> b) {
		auto old_root = root_;

		auto c = a.parent;
		a.parent = b.parent;
		b.parent = c;
		if(a.parent != null) {
			if(a.parent.left_son == b) {
				a.parent.left_son = a;
			} else {
				a.parent.right_son = a;
			}
		} else {
			root_ = a;
		}
		if(b.parent != null) {
			if(b.parent.left_son == a) {
				b.parent.left_son = b;
			} else {
				b.parent.right_son = b;
			}
		} else {
			root_ = b;
		}

		c = a.right_son;
		a.right_son = b.right_son;
		b.right_son = c;
		if(a.right_son != null) {
			a.right_son.parent = a;
		}
		if(b.right_son != null) {
			b.right_son.parent = b;
		}

		c = a.left_son;
		a.left_son = b.left_son;
		b.left_son = c;
		if(a.left_son != null) {
			a.left_son.parent = a;
		}
		if(b.left_son != null) {
			b.left_son.parent = b;
		}
	} noeffect;

	fun Pair<Integer, T> erase_iter(AVLNode_<T> node) {
		while(1) {
			if(node.eq(end_)) {
				return new Pair<Integer, T>(new Integer(0), null), null, null;
			}
			if(node.left_son == null && node.right_son == null) {
				if(node.parent.left_son == node) {
					node.parent.left_son = null;
				} else {
					node.parent.right_son = null;
				}
			} else if (node.left_son != null && node.right_son == null) {
				node.left_son.parent = node.parent;
				if(node.parent != null) {
					if(node.parent.left_son == node) {
						node.parent.left_son = node.left_son;
					} else {
						node.parent.right_son = node.left_son;
					}
				} else {
					root_ = node.left_son;
				}
			} else if (node.left_son == null && node.right_son != null) {
				node.right_son.parent = node.parent;
				if(node.parent != null) {
					if(node.parent.left_son == node) {
						node.parent.left_son = node.right_son;
					} else {
						node.parent.right_son = node.right_son;
					}
				} else {
					root_ = node.right_son;
				}
			} else {
				swap_(node, node.next());
				continue;
			}
			break;
		}
		var T old = node.deref();
		auto old_node = node;
		node = node.parent;
		while(node != null) {
			node = rebalance_(node);
		}
		old_node.data = null;
		old_node.height = null;
		old_node.parent = null;
		old_node.left_son = null;
		old_node.right_son = null;
		size_ = size_ - 1;
		return new Pair<Integer, T>(new Integer(1), old), old, old_node;
	} dual (T old, AVLNode_<T> use_node) {
		if(use_node != null) {
			insert_(old, use_node);
		}
	};
}

struct SetBox_ T { /*silence optional errors*/
	strong T data;
	fun void print(OutputStream o) {};
	fun int less(SetBox_ T) {return 0;};
	constructor(T d) {
		data = d;
	};
}

struct SetIterator_ T {
	weak AVLNode_<Pair<SetBox_<JournalTag<T>>, T>> node_;
	constructor(AVLNode_<Pair<SetBox_<JournalTag<T>>, T>> node) {
		node_ = node;
	};
	fun T deref(){
		return node_.deref().get_second();
	};

	fun void set(T element){
		node_.deref().get_first().data = new JournalTag<T>(element);
		node_.deref().set_second(element);
	};

	fun SetIterator_ next() {
		return new SetIterator_(node_.next());
	};

	fun SetIterator_ prev() {
		return new SetIterator_(node_.prev());
	};

	fun int eq(SetIterator_ that) {
		return node_.eq(that.node_);
	};

	fun int neq(SetIterator_ that) {
		return node_.neq(that.node_);
	};
	fun JournalTag<T> tag(){
		return node_.deref().get_first().data;
	};
}

nojournal SetComparator_ T : Comparator<Pair<SetBox_<JournalTag<T>>, T>> {
	strong Comparator<T> orig_comparator_;
	constructor(Comparator<T> c)(){
		orig_comparator_ = c;
	};
	fun int less(Pair<SetBox_<JournalTag<T>>, T> a, Pair<SetBox_<JournalTag<T>>, T> b) {
		auto at = new JournalTag<T>(a.get_second());
		auto bt = new JournalTag<T>(b.get_second());
		a.get_first().data.bring_back();
		b.get_first().data.bring_back();
		var int result = orig_comparator_.less(a.get_second(), b.get_second());
		at.bring_back();
		bt.bring_back();
		return result;
	};
}

Set T : Container<T, SetIterator_<T>> {
	strong UntaggedSet<Pair<SetBox_<JournalTag<T>>, T>> set_;
	fun int size() {
		return set_.size();
	} noeffect;
	constructor(Comparator<T> c)() {
		set_ = new UntaggedSet<Pair<SetBox_<JournalTag<T>>, T>>(new SetComparator_<T>(c));
	};
	fun SetIterator_<T> begin() {
		return new SetIterator_<T>(set_.begin());
	} noeffect;
	fun SetIterator_<T> end() {
		return new SetIterator_<T>(set_.end());
	} noeffect;
	fun SetIterator_<T> find(T key) {
		return new SetIterator_<T>(set_.find(new Pair<SetBox_<JournalTag<T>>, T>(new SetBox_<JournalTag<T>>(new JournalTag<T>(key)), key)));
	} noeffect;
	fun Pair<Integer, T> insert(T entry) {
		return this.insert_(new Pair<SetBox_<JournalTag<T>>, T>(new SetBox_<JournalTag<T>>(new JournalTag<T>(entry)), entry), new AVLNode_<Pair<SetBox_<JournalTag<T>>, T>>(null, null));
	} auto;
	fun Pair<Integer, T> insert_(Pair<SetBox_<JournalTag<T>>, T> entry, AVLNode_<Pair<SetBox_<JournalTag<T>>, T>> use_node) {
		auto r = set_.insert_(entry, use_node);
		auto rr = r.get_second();
		if(rr == null) {
			return new Pair<Integer, T>(r.get_first(), null), entry, 0;
		} else {
			return new Pair<Integer, T>(r.get_first(), rr.get_second()), rr, 1;
		}
	} dual (Pair<SetBox_<JournalTag<T>>, T> t, int had_old) {
		if(had_old) {
			set_.insert_(t, null);
		} else {
			set_.erase_iter(set_.find(t));
		}
	};
	fun Pair<Integer, T> erase(T key) {
		return this.erase_iter(find(key));
	} auto;
	fun Pair<Integer, T> erase_iter(SetIterator_<T> node) {
		auto n = node.node_;
		if(n.eq(set_.end())) {
			return new Pair<Integer, T>(new Integer(0), null), null, null;
		}
		auto r = set_.erase_iter(n);
		auto rr = r.get_second();
		if(rr == null) {
			return new Pair<Integer, T>(r.get_first(), null), null, null;
		} else {
			return new Pair<Integer, T>(r.get_first(), rr.get_second()), rr.get_second(), n;
		}
	} dual (Pair<SetBox_<JournalTag<T>>, T> old, AVLNode_<Pair<SetBox_<JournalTag<T>>, T>> use_node) {
		if(use_node != null) {
			insert_(old, use_node);
		}
	};
}
