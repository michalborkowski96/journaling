struct AVLNode_ T {
	int height;
	strong T data;
	weak AVLNode_ parent;
	strong AVLNode_ left_son;
	strong AVLNode_ right_son;
	constructor (T d, AVLNode_ p) {
		data = d;
		parent = p;
	};

	fun T deref() {
		return data;
	};

	fun void set(T e) {
		data = e;
	};

	fun int eq(AVLNode_ that) {
		return this == that;
	};

	fun int neq(AVLNode_ that) {
		return this != that;
	};

	fun int recalc_height() {
		var int hl = -1;
		if(left_son != null) {
			hl = left_son.height;
		}
		var int hr = -1;
		if(right_son != null) {
			hr = right_son.height;
		}
		if(hr > hl) {
			height = hr + 1;
		} else {
			height = hl + 1;
		}
		return hr - hl;
	};

	fun AVLNode_ next() {
		if(right_son != null) {
			var AVLNode_ b = right_son;
			while(b.left_son != null) {
				b = b.left_son;
			}
			return b;
		}
		var AVLNode_ b = parent;
		var AVLNode_ d = this;
		while(1) {
			if(b.left_son != null && b.left_son == d) {
				return b;
			}
			d = b;
			b = b.parent;
		}
		return null;
	};

	fun AVLNode_ prev() {
		if(left_son != null) {
			var AVLNode_ b = left_son;
			while(b.right_son != null) {
				b = b.right_son;
			}
			return b;
		}
		var AVLNode_ b = parent;
		var AVLNode_ d = this;
		while(1) {
			if(b.right_son != null && b.right_son == d) {
				return b;
			}
			d = b;
			b = b.parent;
		}
		return null;
	};

	fun void right_rotate() {
		var AVLNode_ ls = left_son;
		ls.parent = parent;
		left_son = ls.right_son;
		if(left_son != null) {
			left_son.parent = this;
		}
		ls.right_son = this;
		parent = ls;
		if(parent.parent != null) {
			if(parent.parent.left_son == this) {
				parent.parent.left_son = parent;
			} else {
				parent.parent.right_son = parent;
			}
		}
		recalc_height();
		parent.recalc_height();
	};

	fun void left_rotate() {
		var AVLNode_ rs = right_son;
		rs.parent = parent;
		right_son = rs.left_son;
		if(right_son != null) {
			right_son.parent = this;
		}
		rs.left_son = this;
		parent = rs;
		if(parent.parent != null) {
			if(parent.parent.left_son == this) {
				parent.parent.left_son = parent;
			} else {
				parent.parent.right_son = parent;
			}
		}
		recalc_height();
		parent.recalc_height();
	};
}
