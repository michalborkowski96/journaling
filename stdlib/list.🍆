import "container.🍆"
import "list_element_.🍆"

List T : OrderedContainer<T, ListElement_<T>> {
	int size_;
	strong ListElement_<T> begin_;
	strong ListElement_<T> end_;

	constructor()(){
		end_ = new ListElement_<T>(null, null, null);
		begin_ = end_;
	};

	fun ListElement_<T> begin() {
		return begin_;
	} noeffect;

	fun ListElement_<T> end() {
		return end_;
	} noeffect;

	fun int size() {
		return size_;
	} noeffect;

	fun void swap(ListElement_<T> a, ListElement_<T> b) {
		auto e = b.element_;
		b.element_ = a.element_;
		a.element_ = e;
		return a, b;
	} dual;

	fun ListElement_<T> insert(ListElement_<T> iter, T element) {
		return this.insert_(:iter, element, :new ListElement_<T>(null, null, null));
	} auto;

	fun ListElement_<T> insert_(ListElement_<T> iter, T element, ListElement_<T> use_iter) {
		size_ = size_ + 1;
		use_iter.element_ = element;
		use_iter.prev_ = iter.prev_;
		use_iter.next_ = iter;
		var ListElement_<T> n = use_iter;
		iter.prev_ = n;
		if(iter.eq(begin_)) {
			begin_ = n;
		} else {
			n.prev_.next_ = n;
		}
		return n, n;
	} dual (ListElement_<T> iter) {
		erase(iter);
	};

	fun ListElement_<T> erase(ListElement_<T> iter) {
		size_ = size_ - 1;
		iter.next_.prev_ = iter.prev_;
		if(iter.prev_ != null) {
			iter.prev_.next_ = iter.next_;
		} else {
			begin_ = iter.next_;
		}
		auto n = iter.next_;
		auto e = iter.element_;
		iter.element_ = null;
		iter.next_ = null;
		iter.prev_ = null;
		return n, n, e, iter;
	} dual (ListElement_<T> iter, T element, ListElement_<T> use_iter) {
		insert_(iter, element, use_iter);
	};
}

