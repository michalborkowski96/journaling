import "container"
import "avl_"

nojournal MapComparator_ K V : Comparator<Pair<K, V>> {
	strong Comparator<K> c;
	constructor (Comparator<K> comp){
		c = comp;
	};
	fun bool less(Pair<K, V> e1, Pair<K, V> e2) {
		return c.less(e1.first, e2.first);
	};
}

Map K V : Container<Pair<K, V>> {
	strong Set<Pair<K, V>> data;
	constructor(Comparator<K> c) {
		data = new Set<Pair<K, V>>(new MapComparator_<K, V>(c));
	};
	fun V at(K key) {
		var Iterator<Pair<K, V>> iter = find(key);
		return iter.deref().second;
	} noeffect;
	fun int size() {
		return data.size();
	} noeffect;
	fun Iterator<Pair<K, V>> begin() {
		return data.begin();
	} noeffect;
	fun Iterator<Pair<K, V>> end() {
		return data.end();
	} noeffect;
	fun void clear() {
		data.clear();
	} irreversible;
	fun Iterator<Pair<K, V>> find(K key) {
		return data.find(new Pair<K, V>(key, null));
	} noeffect;

	fun MapEntry_<K, V> insert(K key, V value) {
		return this.insert(new Pair<K, V>(key, value));
	} dual (){};

	fun Pair<bool, Pair<K, V>> insert(Pair<K, V> entry) {
		var Pair<bool, Pair<K, V>> old = data.insert(entry);
		if(old.first) {
			return old, old.second, true;
		} else {
			return old, new Pair<K, V>(entry.first, null), false;
		}
	} dual (Pair<K, V> old, bool had_old) {
		if(had_old) {
			insert(old);
		} else {
			erase(old.first);
		}
	};

	fun Pair<bool, V> erase(K key) {
		var Pair<bool, Pair<K, V>> old = data.erase(entry);
		if(old.first) {
			return old, old.second, true;
		} else {
			return old, null, false;
		}
	} dual (Pair<K, V> old, bool had_old) {
		if(had_old) {
			insert(old);
		}
	};
}
