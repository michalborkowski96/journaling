import "../../stdlib/COMPLETE.🍆"

nojournal Adder : Modifier<Vector<int>> {
	int diff;
	constructor(int d) () {
		diff = d;
	};
	fun void do(Vector<int> l) {
		for(auto it = l.begin(); !it.eq(l.end()); it = it.next()) {
			it.set(it.deref() + diff);
		}
	};
	fun void undo(Vector<int> l) {
		for(auto it = l.begin(); !it.eq(l.end()); it = it.next()) {
			it.set(it.deref() - diff);
		}
	};
}

struct Main {
	strong OutputStream out;
	strong InputStream in;
	fun int sum_list(Vector<int> l) {
		var int sum = 0;
		for(auto it = l.begin(); !it.eq(l.end()); it = it.next()) {
			sum = sum + it.deref();
		}
		return sum;
	};
	fun void test(){
		auto ints = new Vector<int>();
		var int limit = in.get_int();
		for(var int i = 0; i < limit; i = i + 1) {
			ints.push_back(i);
		}
		auto sum = sum_list[ints];
		new JournalTag<Vector<int>>(ints).modify(new Adder(limit));
		out.print_int_ln(sum_list(ints));
		out.print_int_ln(sum);
	};


	constructor(){
		out = new StdOut();
		in = new StdIn();
	};

	fun void main(){
		test();
	};
}
