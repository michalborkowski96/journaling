import "../stdlib/integer.🍆"
import "../stdlib/list.🍆"

struct Main {
	strong OutputStream out;
	fun int sum_list(List<Integer> l) {
		out.print_string("Start sum_list with ");
		l.print(out);
		out.print_newline();
		var int sum = 0;
		for(auto it = l.begin(); !it.eq(l.end()); it = it.next()) {
			sum = sum + it.deref().to_int();
		}
		out.print_string("Done sum_list with ");
		l.print(out);
		out.print_newline();
		return sum;
	};
	fun Integer sum_listI(List<Integer> l) {
		out.print_string("Start sum_listI with ");
		l.print(out);
		out.print_newline();
		var Integer sum = new Integer(0);
		for(auto it = l.begin(); !it.eq(l.end()); it = it.next()) {
			sum = sum + it.deref();
		}
		out.print_string("Done sum_listI with ");
		l.print(out);
		out.print_newline();
		return sum;
	};
	fun void print_ints_info(List<Integer> ints){
		out.print_string("Ints size: ");
		out.print_int(ints.size());
		out.print_newline();
		ints.print(out);
		out.print_newline();
	};
	fun void test1(){
		var List<Integer> ints = new List<Integer>();
		for(var int i = 0; i < 3; i = i + 1) {
			ints.push_back(new Integer(i));
		}
		auto sum0 = sum_list[ints];
		for(var int i = 3; i < 6; i = i + 1) {
			ints.push_back(new Integer(i));
		}
		auto sum1 = sum_listI[ints];
		for(var int i = 6; i < 9; i = i + 1) {
			ints.push_back(new Integer(i));
		}
		ints.begin().set(new Integer(-2));
		ints.end().prev().set(new Integer(-10));
		print_ints_info(ints);
		out.print_string("Sum0: ");
		out.print_int_ln(sum0);
		print_ints_info(ints);
		out.print_string("Sum1: ");
		sum1.print(out);
		out.print_newline();
		print_ints_info(ints);
	};


	fun int lazy_print(List<int> l) {

		auto i = l.begin();
		out.print_string("{");
		if(!i.eq(l.end())) {
			out.print_int(i.deref());
			i = i.next();
		}
		while(!i.eq(l.end())) {
			out.print_string(", ");
			out.print_int(i.deref());
			i = i.next();
		}
		out.print_string("}");

		out.print_newline();
		return 0;
	};
	fun void eval(int i) {
		if(i == 0) {}
	};
	fun void test2(){
		var List<int> ints = new List<int>();
		ints.push_back(4);
		ints.push_back(7);
		ints.push_back(2);
		ints.push_back(6);
		ints.push_back(4);
		ints.push_back(0);
		ints.push_back(345);
		ints.push_back(-5);
		ints.push_back(77);
		var int u = lazy_print[ints];
		ints.sort(new DefaultComparator<int>());
		eval(lazy_print(ints));
		eval(u);
		eval(lazy_print(ints));

		out.print_newline();

		u = lazy_print[ints];
		ints.insert(ints.begin().next().next().next(), 666);
		eval(lazy_print(ints));
		eval(u);
		eval(lazy_print(ints));
	};


	constructor(){
		out = new StdOut();
	};

	fun int main(){
		test1();
		out.print_newline();
		test2();
		return 0;
	};
}
